/*
 * api.c
 *
 *  Created on: Mar 4, 2015
 *      Author: Minh
 */
#include "rest.h"

#include "user_interface.h"
#include "osapi.h"
#include "mem.h"
#include "driver/uart.h"
#include "user_config.h"
#include "espconn.h"
#include "os_type.h"
#include "debug.h"

static int NO_IP = 0;	/* counter for no ip connnection */

void ICACHE_FLASH_ATTR
tcpclient_discon_cb(void *arg)
{

	struct espconn *pespconn = (struct espconn *)arg;
	REST_CLIENT* client = (REST_CLIENT *)pespconn->reverse;


}


void ICACHE_FLASH_ATTR
tcpclient_recv(void *arg, char *pdata, unsigned short len)
{
	uint8_t currentLineIsBlank = 0;
	uint8_t httpBody = 0;
	uint8_t inStatus = 0;
	char statusCode[4];
	int i = 0, j;
	uint32_t code = 0;
	uint16_t crc;

	struct espconn *pCon = (struct espconn*)arg;
	REST_CLIENT *client = (REST_CLIENT *)pCon->reverse;

	for(j=0 ;j<len; j++){
		char c = pdata[j];

		if(c == ' ' && !inStatus){
			inStatus = 1;
		}
		if(inStatus && i < 3 && c != ' '){
			statusCode[i] = c;
			i++;
		}
		if(i == 3){
			statusCode[i] = '\0';
			code = atoi(statusCode);
		}
		 if(httpBody){
			 //only write response if its not null
			 uint32_t body_len = len - j;
			 INFO("REST: status = %d, body_len = %d\r\n",code, body_len);
			 break;
		}
		else
		{
			if (c == '\n' && currentLineIsBlank) {
				httpBody = true;
			}
			if (c == '\n') {
				// you're starting a new line
				currentLineIsBlank = true;
			}
			else if (c != '\r') {
				// you've gotten a character on the current line
				currentLineIsBlank = false;
			}
		}
	}
	if(client->security)
		espconn_secure_disconnect(client->pCon);
	else
		espconn_disconnect(client->pCon);

}
void ICACHE_FLASH_ATTR
tcpclient_sent_cb(void *arg)
{
	struct espconn *pCon = (struct espconn *)arg;
	REST_CLIENT* client = (REST_CLIENT *)pCon->reverse;
	INFO("REST: Sent\r\n");
}

void ICACHE_FLASH_ATTR
tcpclient_connect_cb(void *arg)
{
	struct espconn *pCon = (struct espconn *)arg;
	REST_CLIENT* client = (REST_CLIENT *)pCon->reverse;

	espconn_regist_disconcb(client->pCon, tcpclient_discon_cb);
	espconn_regist_recvcb(client->pCon, tcpclient_recv);
	espconn_regist_sentcb(client->pCon, tcpclient_sent_cb);

	if(client->security){
		espconn_secure_sent(client->pCon, client->data, client->data_len);
	}
	else{
		espconn_sent(client->pCon, client->data, client->data_len);
	}
}
void ICACHE_FLASH_ATTR
tcpclient_recon_cb(void *arg, sint8 errType)
{
	struct espconn *pCon = (struct espconn *)arg;
	REST_CLIENT* client = (REST_CLIENT *)pCon->reverse;

}
LOCAL void ICACHE_FLASH_ATTR
rest_dns_found(const char *name, ip_addr_t *ipaddr, void *arg)
{
	struct espconn *pConn = (struct espconn *)arg;
	REST_CLIENT* client = (REST_CLIENT *)pConn->reverse;
	if(ipaddr == NULL)
	{
		INFO("REST DNS: Found, but got no ip, try to reconnect:%d\r\n", NO_IP);
		
		NO_IP++;
		return;
	}

	INFO("REST DNS: found ip %d.%d.%d.%d\n",
			*((uint8 *) &ipaddr->addr),
			*((uint8 *) &ipaddr->addr + 1),
			*((uint8 *) &ipaddr->addr + 2),
			*((uint8 *) &ipaddr->addr + 3));

	if(client->ip.addr == 0 && ipaddr->addr != 0)
	{
		os_memcpy(client->pCon->proto.tcp->remote_ip, &ipaddr->addr, 4);
		if(client->security){
			espconn_secure_connect(client->pCon);
		}
		else {
			espconn_connect(client->pCon);
		}
		INFO("REST: connecting...\r\n");
		NO_IP++;
	}

	if(NO_IP >= 10)
	{
		NO_IP = 0;
		system_restart();
	}
}
uint32_t ICACHE_FLASH_ATTR 
REST_Setup(uint8_t *rest_host, uint16_t len, uint32_t port,uint32_t security)
{
	REST_CLIENT *client;
	client = (REST_CLIENT*)os_zalloc(sizeof(REST_CLIENT));
	os_memset(client, 0, sizeof(REST_CLIENT));
	if(client == NULL)
		return 0;

	client->resp_cb = 0x00000000; // TODO: CHECK if this callback function is required here
	client->host = rest_host;
	client->port = port;
	client->security = security;
	client->ip.addr = 0;

	client->data = (uint8_t*)os_zalloc(1024);

	client->header = (uint8_t*)os_zalloc(4);
	client->header[0] = 0;

	client->content_type = (uint8_t*)os_zalloc(22);
	os_sprintf(client->content_type, "x-www-form-urlencoded");
	client->content_type[21] = 0;

	client->user_agent = (uint8_t*)os_zalloc(18);
	os_sprintf(client->user_agent, "ESPDRUINO@yangwu");
	client->user_agent[17] = 0;

	client->pCon = (struct espconn *)os_zalloc(sizeof(struct espconn));
	client->pCon->proto.tcp = (esp_tcp *)os_zalloc(sizeof(esp_tcp));

	client->pCon->type = ESPCONN_TCP;
	client->pCon->state = ESPCONN_NONE;
	client->pCon->proto.tcp->local_port = espconn_port();
	client->pCon->proto.tcp->remote_port = client->port;

	client->pCon->reverse = client;

	return (uint32_t)client;
}

uint32_t ICACHE_FLASH_ATTR REST_Request(uint32_t client_ptr, uint8_t *method, uint8_t *path)
{
	REST_CLIENT *client;
	uint16_t realLen = 0;

	/* Get client*/
	client = (REST_CLIENT*)client_ptr;

	// There is no body
	realLen = 0;



	client->pCon->state = ESPCONN_NONE;

	client->data_len = os_sprintf(client->data, "%s %s HTTP/1.1\r\n"
												"Host: %s\r\n"
												"%s"
												"Content-Length: %d\r\n"
												"Connection: close\r\n"
												"Content-Type: %s\r\n"
												"User-Agent: %s\r\n\r\n",
												method, path,
												client->host,
												client->header,
												realLen,
												client->content_type,
												client->user_agent);

	client->pCon->state = ESPCONN_NONE;
	espconn_regist_connectcb(client->pCon, tcpclient_connect_cb);
	espconn_regist_reconcb(client->pCon, tcpclient_recon_cb);

	if(UTILS_StrToIP(client->host, &client->pCon->proto.tcp->remote_ip)) {
		if(client->security){
			espconn_secure_connect(client->pCon);
		}
		else {
			espconn_connect(client->pCon);
		}
	}
	else {
		espconn_gethostbyname(client->pCon, client->host, &client->ip, rest_dns_found);
	}

	return 1;
}

